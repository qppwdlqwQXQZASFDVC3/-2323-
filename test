--[[
     1.1
]]--

local function rndName(len)
    local chars = {}
    for i = 1, len do
        chars[i] = string.char(math.random(97, 122))
    end
    return table.concat(chars)
end

local function obfuscateString(str)
    local bytes = {}
    for i = 1, #str do
        bytes[i] = string.byte(str, i)
    end
    return "string.char("..table.concat(bytes, ",")..")"
end

local function addJunkCode(count, prefix)
    local junk = {}
    for i = 1, count do
        local var = prefix..rndName(8)
        junk[i] = "local "..var.." = "..math.random(1,1000)
    end
    return table.concat(junk, "; ")
end

local function obfuscate(source, options)
    options = options or {}
    local prefix = options.prefix or "OBF_"
    local watermark = options.watermark or "Obfuscated with Simple Lua Obfuscator"
    
    -- Temel obfuscation
    local obfuscated = "--[["..watermark.."]]--\n\n"
    
    -- Junk kod ekle
    obfuscated = obfuscated..addJunkCode(math.random(5,10), prefix).."; "
    
    -- Stringleri obfuscate et
    local strPattern = '(["\'])(.-)%1'
    local processed = source:gsub(strPattern, function(quote, str)
        return obfuscateString(str)
    end)
    
    -- Değişken isimlerini değiştir
    local varPattern = "([%a_][%w_]*)"
    local vars = {}
    processed = processed:gsub(varPattern, function(var)
        if not vars[var] and not (var == "local" or var == "function" or var == "end") then
            vars[var] = prefix..rndName(8)
        end
        return vars[var] or var
    end)
    
    obfuscated = obfuscated..processed
    
    -- Sonuna daha fazla junk kod ekle
    obfuscated = obfuscated.."; "..addJunkCode(math.random(3,7), prefix)
    
    return obfuscated
end

-- Kullanım örneği
local exampleCode = [[
local message = "Merhaba Dünya!"
print(message)

function topla(a, b)
    return a + b
end

print(topla(5, 3))
]]

local result = obfuscate(exampleCode, {
    prefix = "SEC_",
    watermark = "Güvenli Kod"
})

print(result)
